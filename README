=====
PyZen
=====

PyZen is a work-a-like to Ruby's ZenTest framework. It will run in the
background and re-run your test suite when a change is detected.

Django
======

Configuration
-------------
Just add ``pyzen`` to your ``INSTALLED_APPS``.

Usage
-----
PyZen adds a new manage.py command ``zen``. To close the tester use
ctrl+c.

Flask
=====
Using PyZen with Flask requires Flask-Script and plays well with
Flask-Testing (though it is not required).

Configuration
-------------
PyZen exposes two Flask-Script commands: ``Test`` and ``ZenTest``. To
configure both::
    
    from flaskext.script import Manager
    from pyzen.flaskext.script import Test, ZenTest
    
    manager = Manager(app)
    
    manager.add_command('test', Test())
    manager.add_command('zen', ZenTest())
    
    if __name__ == "__main__":
        manager.run()
    

The default discovery pattern is ``*/tests/*.py;*/tests.py``. This default
can be override with a ``pattern`` keyword argument to both classes.

Usage
-----
The ``Test`` command will run a single test run and exit. The ``ZenTest``
command will run the normal PyZen continuous tester. You can override the
auto-detected base directory with the ``--start-dir=`` argument.
